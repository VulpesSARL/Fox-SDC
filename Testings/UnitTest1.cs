using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FoxSDC_Common;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Text;
using Testings.Properties;
using FoxSDC_Agent;
using Fox_LicenseGenerator;
using System.Runtime.InteropServices;
using FoxSDC_Server;

namespace Testings
{
    [TestClass]
    public class UnitTest1
    {
        class FooClass
        {
            public string s1;
            public string s2;
            public int i1;
            public int i2;
            public Int64 ii1;
            public Int64 ii2;
        }

        [TestMethod]
        public void TestEXESig()
        {
#if DEBUG
            string Filename = Environment.ExpandEnvironmentVariables("%TEMP%\\Vulpes Clock.exe");
            File.WriteAllBytes(Filename, Resources.CLOCK);
            ProgramAgent.Init();
            if (ProgramAgent.LoadDLLForced(SystemInfos.CPUType.EM64T) == false)
                Assert.Inconclusive("Cannot load Agent supplemental DLL");
            Assert.AreEqual(true, ProgramAgent.CPP.VerifyEXESignature(Filename));
#else
            Assert.AreEqual(true, true);
#endif
        }

        [TestMethod]
        public void TestEXESigTampered()
        {
#if DEBUG
            string Filename = Environment.ExpandEnvironmentVariables("%TEMP%\\Vulpes Clock Tampered.exe");
            File.WriteAllBytes(Filename, Resources.CLOCK___Tampered);
            ProgramAgent.Init();
            if (ProgramAgent.LoadDLLForced(SystemInfos.CPUType.EM64T) == false)
                Assert.Inconclusive("Cannot load Agent supplemental DLL");
            Assert.AreEqual(false, ProgramAgent.CPP.VerifyEXESignature(Filename));
#else
            Assert.AreEqual(true, true);
#endif
        }

        [TestMethod]
        public void TestEXESigWrong()
        {
#if DEBUG
            string Filename = Environment.ExpandEnvironmentVariables("%TEMP%\\Vulpes Clock Wrong.exe");
            File.WriteAllBytes(Filename, Resources.CLOCK___Wrong);
            ProgramAgent.Init();
            if (ProgramAgent.LoadDLLForced(SystemInfos.CPUType.EM64T) == false)
                Assert.Inconclusive("Cannot load Agent supplemental DLL");
            Assert.AreEqual(false, ProgramAgent.CPP.VerifyEXESignature(Filename));
#else
            Assert.AreEqual(true, true);
#endif
        }

        [TestMethod]
        public void TestHashSet1()
        {
            HashSet<string> SyncedEventLog = JsonConvert.DeserializeObject<HashSet<string>>(Encoding.UTF8.GetString(Resources.SyncedEventLog));
            Assert.IsNotNull(SyncedEventLog);
            Assert.AreEqual(127807, SyncedEventLog.Count);
        }

        [TestMethod]
        public void TestHashSet2()
        {
            HashSet<string> SyncedEventLog = JsonConvert.DeserializeObject<HashSet<string>>(Encoding.UTF8.GetString(Resources.SyncedEventLog2));
            Assert.IsNotNull(SyncedEventLog);
            Assert.AreEqual(2, SyncedEventLog.Count);

            byte[] data = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(SyncedEventLog, Formatting.None));
            string s1 = BitConverter.ToString(Resources.SyncedEventLog2);
            string s2 = BitConverter.ToString(data);
            Debug.WriteLine(s1);
            Debug.WriteLine(s2);
            Assert.AreEqual(true, s1 == s2);
        }

        [TestMethod]
        public void CreateCertTest()
        {
            string Filename = Environment.ExpandEnvironmentVariables("%TEMP%\\Vulpes Test Certificate.pfx");
            string Filename2 = Environment.ExpandEnvironmentVariables("%TEMP%\\Vulpes Test Certificate.cer");
            Debug.WriteLine("output file located at: " + Filename);
            byte[] PlainCER;
            File.WriteAllBytes(Filename, CertificateCreation.GenerateRootCertificate("Vulpes Test Certificate", "Test", out PlainCER));
            File.WriteAllBytes(Filename2, PlainCER);
            Assert.AreEqual(true, true);
        }

        [TestMethod]
        public void Object_PolicyObjectListSigned_Test()
        {
            PolicyObjectListSigned pol = new PolicyObjectListSigned();
            pol.Items = new List<PolicyObjectSigned>();
            pol.Signature = new byte[] { 0, 1, 2, 3, 4 };
            pol.TimeStampCheck = new DateTime(2016, 1, 1, 0, 0, 0, 0);
            string JSON = JsonConvert.SerializeObject(pol);
            Assert.AreEqual("{\"TimeStampCheck\":\"2016-01-01T00:00:00\",\"Signature\":\"AAECAwQ=\",\"Items\":[]}", JSON);
        }

        [TestMethod]
        public void Object_PolicyObject_Test()
        {
            PolicyObject pol = new PolicyObject();
            pol.Condition = "1=1";
            pol.Order = 1;
            pol.Data = "{Test:\"foo\",Data:\"bar\"}";
            pol.DataAddtions1 = "Addition1";
            pol.DataAddtions2 = "Addition2";
            pol.DataAddtions3 = "Addition3";
            pol.DataAddtions4 = "Addition4";
            pol.DataAddtions5 = "Addition5";
            pol.DT = new DateTime(2016, 1, 1, 0, 0, 0, 0);
            pol.Enabled = true;
            pol.Grouping = 123;
            pol.ID = 456;
            pol.MachineID = "D9C4A40A-86E5-4915-B106-CC184889A3C1";
            pol.Name = "Test Policy";
            pol.TimeStampCheck = new DateTime(2016, 11, 29, 13, 45, 51, 30);
            pol.Type = 555;
            pol.Version = 1;
            string JSON = JsonConvert.SerializeObject(pol);
            Assert.AreEqual("{\"ID\":456,\"Order\":1,\"Name\":\"Test Policy\",\"MachineID\":\"D9C4A40A-86E5-4915-B106-CC184889A3C1\",\"Grouping\":123,\"Data\":\"{Test:\\\"foo\\\",Data:\\\"bar\\\"}\",\"DT\":\"2016-01-01T00:00:00\",\"Version\":1,\"Enabled\":true,\"Type\":555,\"TimeStampCheck\":\"2016-11-29T13:45:51.03\",\"Condition\":\"1=1\",\"DataAddtions1\":\"Addition1\",\"DataAddtions2\":\"Addition2\",\"DataAddtions3\":\"Addition3\",\"DataAddtions4\":\"Addition4\",\"DataAddtions5\":\"Addition5\"}", JSON);
        }

        [TestMethod]
        public void Object_PushData_Test()
        {
            PushData d = new PushData();
            d.Action = "Test";
            d.AdditionalData1 = "add1";
            d.AdditionalData2 = "add2";
            d.AdditionalData3 = 0x123456;
            d.AdditionalDataO = "object";
            d.ReplyID = "abcdef";
            d.TimeStampCheck = new DateTime(2016, 11, 29, 13, 45, 51, 30);
            string JSON = JsonConvert.SerializeObject(d);
            Assert.AreEqual("{\"Action\":\"Test\",\"AdditionalDataO\":\"object\",\"AdditionalData1\":\"add1\",\"AdditionalData2\":\"add2\",\"AdditionalData3\":1193046,\"TimeStampCheck\":\"2016-11-29T13:45:51.03\",\"ReplyID\":\"abcdef\"}", JSON);
        }

        [TestMethod]
        public void Test_Main_Sig()
        {
            byte[] sig = new byte[] {
                0x78, 0x62, 0x66, 0xED, 0xE4, 0xBB, 0x8B, 0x2F, 0x1F, 0x1F, 0x3E, 0x29, 0xF0, 0xF1, 0xB6, 0x6D,
                0xDF, 0x95, 0x0C, 0xB9, 0x4B, 0x8A, 0xFD, 0xFF, 0xB6, 0x71, 0xCA, 0x44, 0x7E, 0x91, 0xA2, 0x20,
                0x68, 0x15, 0x8D, 0x3A, 0xF3, 0x49, 0xF9, 0xD4, 0x5B, 0x29, 0xDD, 0x75, 0x59, 0x5A, 0xAB, 0x3C,
                0xBD, 0x1F, 0x55, 0xC5, 0xEF, 0xBC, 0xDC, 0xB7, 0x7C, 0x09, 0xC5, 0x38, 0x3A, 0x16, 0x7D, 0x45,
                0xD4, 0x25, 0xA1, 0xB7, 0xF2, 0x96, 0xD5, 0x41, 0xFA, 0xA5, 0x67, 0xE7, 0xD3, 0xC0, 0x0F, 0x78,
                0x3A, 0xE0, 0x64, 0xD4, 0xB9, 0x9B, 0x20, 0xC1, 0x46, 0x48, 0x3C, 0xE0, 0x95, 0x4C, 0x89, 0x98,
                0x6A, 0x6C, 0x71, 0x4D, 0x83, 0xB4, 0xFE, 0xAE, 0x50, 0x76, 0xFD, 0x5D, 0x91, 0x68, 0x85, 0x49,
                0x1C, 0x8A, 0x42, 0xFB, 0x4D, 0x57, 0x9F, 0xC3, 0x24, 0x94, 0xCA, 0x91, 0x31, 0x29, 0x20, 0x4D,
                0xB3, 0x5F, 0xB5, 0x84, 0xCC, 0xF6, 0xB4, 0x23, 0x0E, 0x78, 0x75, 0x79, 0x06, 0xE7, 0x57, 0xE6,
                0x15, 0xF5, 0xB3, 0xE5, 0xE4, 0xC4, 0xAF, 0xBF, 0x03, 0x9B, 0x59, 0x32, 0x25, 0x04, 0xC3, 0x00,
                0x31, 0xFF, 0x5B, 0xE2, 0x59, 0x8B, 0xDC, 0xB7, 0x7B, 0xAE, 0x4C, 0xC0, 0x50, 0x31, 0xE4, 0xCD,
                0x78, 0x5B, 0xAB, 0x71, 0xE0, 0x40, 0xFF, 0xBA, 0xE2, 0xD5, 0xF7, 0x4C, 0xE6, 0xFB, 0x7B, 0x80,
                0x40, 0x9E, 0x06, 0x8C, 0xAE, 0x8D, 0xC3, 0x93, 0x46, 0x35, 0x5C, 0x65, 0x78, 0x93, 0xEE, 0xA5,
                0x46, 0x23, 0xD6, 0xB3, 0xF2, 0xC8, 0x81, 0xD6, 0x47, 0x43, 0x80, 0xF0, 0x9E, 0xE7, 0xFF, 0xA9,
                0x91, 0x6F, 0x48, 0x38, 0x9D, 0xAA, 0x25, 0x3E, 0xF0, 0xE1, 0xB6, 0x9E, 0x6B, 0xC0, 0x51, 0xC5,
                0x28, 0xA1, 0x49, 0x45, 0xC9, 0x69, 0xED, 0xC1, 0x1E, 0xE8, 0x89, 0x38, 0x47, 0xD3, 0x34, 0x03};

            Assert.AreEqual(true, Certificates.Verify(Encoding.ASCII.GetBytes("123456789"), sig, InternalCertificate.Main));
        }

        [TestMethod]
        public void Test_Lic_Sig()
        {
            byte[] sig = new byte[] {
                0x7E, 0x1F, 0x8F, 0x13, 0xB3, 0xCC, 0xF4, 0x04, 0xF0, 0xD0, 0x2B, 0x18, 0x7F, 0xC8, 0x70, 0x81,
                0x8F, 0x95, 0x78, 0x19, 0x01, 0xD2, 0x9A, 0x40, 0xB9, 0xC7, 0x3F, 0x4C, 0xAB, 0xBB, 0x0D, 0x77,
                0xC0, 0xEF, 0x69, 0x89, 0x50, 0x09, 0xB9, 0x4C, 0xB5, 0x34, 0x96, 0x1C, 0x1E, 0x3C, 0xC3, 0xD7,
                0x69, 0xCD, 0xD3, 0x86, 0x8E, 0xF2, 0x15, 0x36, 0x24, 0xAF, 0xBE, 0xB0, 0xBA, 0x69, 0x79, 0xC4,
                0xC9, 0x22, 0xFD, 0x4D, 0xA3, 0x7C, 0x73, 0x14, 0x65, 0xE0, 0x1B, 0xF2, 0xB0, 0x1B, 0xB7, 0x9C,
                0xBA, 0x44, 0xC9, 0x0B, 0x54, 0x1F, 0xC6, 0x02, 0xB4, 0x83, 0xE3, 0x26, 0x86, 0x02, 0x99, 0x32,
                0x50, 0x71, 0x0A, 0x99, 0xA1, 0x89, 0xB3, 0xA8, 0xB2, 0x77, 0x06, 0x33, 0x10, 0x8D, 0x99, 0x45,
                0x84, 0xAD, 0xFA, 0xEB, 0x02, 0x7D, 0x96, 0xA3, 0xB4, 0xC4, 0x6D, 0x98, 0xDB, 0xDB, 0xEE, 0xFF,
                0xD2, 0x68, 0x64, 0x6F, 0x52, 0x70, 0x1A, 0xDE, 0x3D, 0xA6, 0xA8, 0x0B, 0xA7, 0x7E, 0x05, 0xC8,
                0x70, 0x2D, 0x70, 0x2D, 0x0C, 0x75, 0xE7, 0x33, 0xF6, 0xD1, 0x18, 0xCD, 0x59, 0x63, 0xC0, 0x9B,
                0xF1, 0x7B, 0x06, 0xA7, 0xD0, 0x71, 0x2B, 0x73, 0x40, 0x46, 0x42, 0x6F, 0x7F, 0xD1, 0x0A, 0x59,
                0x79, 0xB0, 0x8F, 0xBB, 0x1D, 0x2D, 0xBF, 0x20, 0xED, 0x2E, 0x67, 0xD5, 0xBF, 0x55, 0x53, 0xFB,
                0x4F, 0x2B, 0x26, 0xDA, 0xE1, 0xFA, 0x80, 0x11, 0x0F, 0x2D, 0xD5, 0x08, 0xCC, 0xD3, 0x2B, 0x8D,
                0xFD, 0x9A, 0xD7, 0x2F, 0x55, 0xA0, 0x01, 0xDD, 0xCC, 0xC1, 0x8B, 0x17, 0x1C, 0x30, 0x51, 0x89,
                0x7D, 0x90, 0x70, 0xB6, 0xEB, 0x4B, 0x3F, 0xAA, 0x1F, 0x93, 0x9E, 0x7D, 0x54, 0x08, 0x31, 0x8D,
                0x99, 0x51, 0xAC, 0xA7, 0xFF, 0xD0, 0x76, 0x45, 0xC9, 0x22, 0x57, 0xAB, 0x60, 0x61, 0x7B, 0xC1};

            Assert.AreEqual(true, Certificates.Verify(Encoding.ASCII.GetBytes("123456789"), sig, InternalCertificate.Licensing));
        }

        [TestMethod]
        public void Test_Stream_Sig_Verify()
        {
            MemoryStream str = new MemoryStream(Encoding.ASCII.GetBytes("123456789"));

            byte[] sig = new byte[] {
                0x7E, 0x1F, 0x8F, 0x13, 0xB3, 0xCC, 0xF4, 0x04, 0xF0, 0xD0, 0x2B, 0x18, 0x7F, 0xC8, 0x70, 0x81,
                0x8F, 0x95, 0x78, 0x19, 0x01, 0xD2, 0x9A, 0x40, 0xB9, 0xC7, 0x3F, 0x4C, 0xAB, 0xBB, 0x0D, 0x77,
                0xC0, 0xEF, 0x69, 0x89, 0x50, 0x09, 0xB9, 0x4C, 0xB5, 0x34, 0x96, 0x1C, 0x1E, 0x3C, 0xC3, 0xD7,
                0x69, 0xCD, 0xD3, 0x86, 0x8E, 0xF2, 0x15, 0x36, 0x24, 0xAF, 0xBE, 0xB0, 0xBA, 0x69, 0x79, 0xC4,
                0xC9, 0x22, 0xFD, 0x4D, 0xA3, 0x7C, 0x73, 0x14, 0x65, 0xE0, 0x1B, 0xF2, 0xB0, 0x1B, 0xB7, 0x9C,
                0xBA, 0x44, 0xC9, 0x0B, 0x54, 0x1F, 0xC6, 0x02, 0xB4, 0x83, 0xE3, 0x26, 0x86, 0x02, 0x99, 0x32,
                0x50, 0x71, 0x0A, 0x99, 0xA1, 0x89, 0xB3, 0xA8, 0xB2, 0x77, 0x06, 0x33, 0x10, 0x8D, 0x99, 0x45,
                0x84, 0xAD, 0xFA, 0xEB, 0x02, 0x7D, 0x96, 0xA3, 0xB4, 0xC4, 0x6D, 0x98, 0xDB, 0xDB, 0xEE, 0xFF,
                0xD2, 0x68, 0x64, 0x6F, 0x52, 0x70, 0x1A, 0xDE, 0x3D, 0xA6, 0xA8, 0x0B, 0xA7, 0x7E, 0x05, 0xC8,
                0x70, 0x2D, 0x70, 0x2D, 0x0C, 0x75, 0xE7, 0x33, 0xF6, 0xD1, 0x18, 0xCD, 0x59, 0x63, 0xC0, 0x9B,
                0xF1, 0x7B, 0x06, 0xA7, 0xD0, 0x71, 0x2B, 0x73, 0x40, 0x46, 0x42, 0x6F, 0x7F, 0xD1, 0x0A, 0x59,
                0x79, 0xB0, 0x8F, 0xBB, 0x1D, 0x2D, 0xBF, 0x20, 0xED, 0x2E, 0x67, 0xD5, 0xBF, 0x55, 0x53, 0xFB,
                0x4F, 0x2B, 0x26, 0xDA, 0xE1, 0xFA, 0x80, 0x11, 0x0F, 0x2D, 0xD5, 0x08, 0xCC, 0xD3, 0x2B, 0x8D,
                0xFD, 0x9A, 0xD7, 0x2F, 0x55, 0xA0, 0x01, 0xDD, 0xCC, 0xC1, 0x8B, 0x17, 0x1C, 0x30, 0x51, 0x89,
                0x7D, 0x90, 0x70, 0xB6, 0xEB, 0x4B, 0x3F, 0xAA, 0x1F, 0x93, 0x9E, 0x7D, 0x54, 0x08, 0x31, 0x8D,
                0x99, 0x51, 0xAC, 0xA7, 0xFF, 0xD0, 0x76, 0x45, 0xC9, 0x22, 0x57, 0xAB, 0x60, 0x61, 0x7B, 0xC1};

            Assert.AreEqual(true, Certificates.Verify(str, sig, InternalCertificate.Licensing));
        }

        [TestMethod]
        public void Test_Stream_Sig_Verify2()
        {
            MemoryStream str = new MemoryStream(Encoding.ASCII.GetBytes("123456789"));

            byte[] sig = new byte[] {
                0x7E, 0x1F, 0x8F, 0x13, 0xB3, 0xCC, 0xF4, 0x04, 0xF0, 0xD0, 0x2B, 0x18, 0x7F, 0xC8, 0x70, 0x81,
                0x8F, 0x95, 0x78, 0x19, 0x01, 0xD2, 0x9A, 0x40, 0xB9, 0xC7, 0x3F, 0x4C, 0xAB, 0xBB, 0x0D, 0x77,
                0xC0, 0xEF, 0x69, 0x89, 0x50, 0x09, 0xB9, 0x4C, 0xB5, 0x34, 0x96, 0x1C, 0x1E, 0x3C, 0xC3, 0xD7,
                0x69, 0xCD, 0xD3, 0x86, 0x8E, 0xF2, 0x15, 0x36, 0x24, 0xAF, 0xBE, 0xB0, 0xBA, 0x69, 0x79, 0xC4,
                0xC9, 0x22, 0xFD, 0x4D, 0xA3, 0x7C, 0x73, 0x14, 0x65, 0xE0, 0x1B, 0xF2, 0xB0, 0x1B, 0xB7, 0x9C,
                0xBA, 0x44, 0xC9, 0x0B, 0x54, 0x1F, 0xC6, 0x02, 0xB4, 0x83, 0xE3, 0x26, 0x86, 0x02, 0x99, 0x32,
                0x50, 0x71, 0x0A, 0x99, 0xA1, 0x89, 0xB3, 0xA8, 0xB2, 0x77, 0x06, 0x33, 0x10, 0x8D, 0x99, 0x45,
                0x84, 0xAD, 0xFA, 0xEB, 0x02, 0x7D, 0x96, 0xA3, 0xB4, 0xC4, 0x6D, 0x98, 0xDB, 0xDB, 0xEE, 0xFF,
                0xD2, 0x68, 0x64, 0x6F, 0x52, 0x70, 0x1A, 0xDE, 0x3D, 0xA6, 0xA8, 0x0B, 0xA7, 0x7E, 0x05, 0xC8,
                0x70, 0x2D, 0x70, 0x2D, 0x0C, 0x75, 0xE7, 0x33, 0xF6, 0xD1, 0x18, 0xCD, 0x59, 0x63, 0xC0, 0x9B,
                0xF1, 0x7B, 0x06, 0xA7, 0xD0, 0x71, 0x2B, 0x73, 0x40, 0x46, 0x42, 0x6F, 0x7F, 0xD1, 0x0A, 0x59,
                0x79, 0xB0, 0x8F, 0xBB, 0x1D, 0x2D, 0xBF, 0x20, 0xED, 0x2E, 0x67, 0xD5, 0xBF, 0x55, 0x53, 0xFB,
                0x4F, 0x2B, 0x26, 0xDA, 0xE1, 0xFA, 0x80, 0x11, 0x0F, 0x2D, 0xD5, 0x08, 0xCC, 0xD3, 0x2B, 0x8D,
                0xFD, 0x9A, 0xD7, 0x2F, 0x55, 0xA0, 0x01, 0xDD, 0xCC, 0xC1, 0x8B, 0x17, 0x1C, 0x30, 0x51, 0x89,
                0x7D, 0x90, 0x70, 0xB6, 0xEB, 0x4B, 0x3F, 0xAA, 0x1F, 0x93, 0x9E, 0x7D, 0x54, 0x08, 0x31, 0x8D,
                0x99, 0x51, 0xAC, 0xA7, 0xFF, 0xD0, 0x76, 0x45, 0xC9, 0x22, 0x57, 0xAB, 0x60, 0x61, 0x7B, 0xC1};

            byte[] cer = new byte[] {
                0x30, 0x82, 0x03, 0x15, 0x30, 0x82, 0x01, 0xFD, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x01,
                0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30,
                0x4D, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x4C, 0x55, 0x31, 0x12,
                0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x09, 0x44, 0x69, 0x64, 0x64, 0x65, 0x6C, 0x65,
                0x6E, 0x67, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x06, 0x56, 0x75, 0x6C,
                0x70, 0x65, 0x73, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x10, 0x56, 0x75,
                0x6C, 0x70, 0x65, 0x73, 0x20, 0x4C, 0x69, 0x63, 0x65, 0x6E, 0x73, 0x69, 0x6E, 0x67, 0x30, 0x20,
                0x17, 0x0D, 0x31, 0x36, 0x31, 0x31, 0x32, 0x37, 0x32, 0x31, 0x33, 0x37, 0x30, 0x30, 0x5A, 0x18,
                0x0F, 0x32, 0x30, 0x39, 0x39, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5A,
                0x30, 0x4D, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x4C, 0x55, 0x31,
                0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x09, 0x44, 0x69, 0x64, 0x64, 0x65, 0x6C,
                0x65, 0x6E, 0x67, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x06, 0x56, 0x75,
                0x6C, 0x70, 0x65, 0x73, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x10, 0x56,
                0x75, 0x6C, 0x70, 0x65, 0x73, 0x20, 0x4C, 0x69, 0x63, 0x65, 0x6E, 0x73, 0x69, 0x6E, 0x67, 0x30,
                0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01,
                0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00,
                0x89, 0xD8, 0x24, 0xE6, 0xD9, 0xCA, 0x0E, 0x3B, 0xB3, 0x0A, 0x0B, 0xA0, 0x3A, 0xDD, 0x22, 0x05,
                0xC4, 0xF3, 0x8F, 0x9B, 0x87, 0xEC, 0x3E, 0xD6, 0x1B, 0x15, 0xE5, 0x82, 0x6A, 0x31, 0x45, 0x5E,
                0xEB, 0x89, 0x57, 0x36, 0x2C, 0x6E, 0x2E, 0x78, 0x28, 0xA2, 0x49, 0xE9, 0xA1, 0x74, 0xC5, 0x93,
                0xFB, 0xA5, 0xC9, 0xE4, 0x58, 0x7C, 0xB2, 0x70, 0x7B, 0x1F, 0x13, 0xCC, 0x1A, 0xE9, 0xE9, 0x14,
                0x32, 0xED, 0xC2, 0xF1, 0x61, 0xB7, 0x68, 0xE7, 0xDC, 0x35, 0xB4, 0x2D, 0xC0, 0x05, 0xEB, 0x59,
                0x23, 0x4D, 0x53, 0xA2, 0xC3, 0x6D, 0x56, 0xD4, 0xD3, 0xA2, 0x20, 0xF2, 0xB5, 0xBC, 0xFE, 0x4B,
                0xD7, 0x9F, 0x7E, 0xC3, 0x69, 0x36, 0xF4, 0xDB, 0xB0, 0xA5, 0xBA, 0x4B, 0xBE, 0xE0, 0x95, 0xA4,
                0x74, 0xCF, 0x01, 0x57, 0x37, 0xD3, 0xB5, 0x71, 0xFB, 0x1A, 0x00, 0x93, 0x53, 0x6B, 0x23, 0x02,
                0x40, 0x74, 0x80, 0x2A, 0xBC, 0xA2, 0x91, 0xD1, 0xBF, 0x56, 0x1E, 0xBD, 0x16, 0x14, 0x34, 0x39,
                0xD1, 0xDF, 0xD1, 0x8F, 0x12, 0x57, 0x18, 0x71, 0xC5, 0x31, 0x16, 0x80, 0x70, 0x25, 0xAD, 0x38,
                0xD3, 0xCE, 0x6D, 0x40, 0x34, 0x8C, 0x85, 0x1B, 0x34, 0x51, 0x43, 0x52, 0x6E, 0x43, 0x92, 0x93,
                0x9B, 0x8A, 0x82, 0x67, 0x66, 0x33, 0x95, 0xA3, 0xA1, 0xFB, 0xEF, 0xD9, 0xD2, 0x94, 0x43, 0xFA,
                0x38, 0x28, 0x9F, 0x8C, 0xF1, 0xC5, 0xEF, 0x8A, 0x25, 0xFA, 0x2B, 0x95, 0xEE, 0xAA, 0xC9, 0x92,
                0xC2, 0x40, 0xE8, 0xFF, 0xE1, 0x6B, 0xF1, 0x08, 0x49, 0xC4, 0x66, 0x55, 0x2C, 0x2B, 0xD6, 0x0E,
                0xEE, 0x60, 0x8C, 0xC7, 0x83, 0x23, 0x9B, 0x15, 0xD9, 0xD1, 0xAC, 0x6D, 0xD9, 0x65, 0xE2, 0x20,
                0xFA, 0x6C, 0xE6, 0x58, 0x3B, 0xA0, 0x2A, 0x84, 0x21, 0x42, 0x3C, 0x23, 0xBA, 0x66, 0xD2, 0xA1,
                0x02, 0x03, 0x01, 0x00, 0x01, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
                0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x49, 0x83, 0x37, 0x69, 0xF6, 0xE0, 0xE9,
                0x22, 0x32, 0x93, 0xBB, 0x0E, 0x51, 0x97, 0xC4, 0x79, 0x4B, 0x9C, 0x45, 0xA5, 0x7A, 0xDC, 0xA4,
                0xCE, 0x0B, 0x27, 0x2D, 0x48, 0xFE, 0xC9, 0x1E, 0x6E, 0x34, 0x13, 0x2F, 0xC3, 0xE0, 0xB3, 0x7F,
                0x0A, 0xC0, 0x31, 0x6B, 0x2E, 0x8E, 0x74, 0x59, 0x2C, 0x5B, 0x37, 0xD4, 0xBF, 0x85, 0x99, 0x0F,
                0x26, 0xE7, 0x56, 0x91, 0x1F, 0x3C, 0x0A, 0xD3, 0xF8, 0x98, 0x09, 0xF6, 0x5F, 0x56, 0xA9, 0xB8,
                0x25, 0xAA, 0x5D, 0xAE, 0x84, 0x0E, 0xF2, 0xAC, 0x79, 0xD3, 0x8A, 0x6F, 0x34, 0xCF, 0x7E, 0xE3,
                0x74, 0xF9, 0xC6, 0x06, 0xF9, 0x7F, 0x3C, 0xE2, 0x8B, 0xA8, 0x8B, 0x81, 0x7E, 0xF5, 0x9C, 0x7A,
                0x3C, 0xBA, 0xF1, 0x6A, 0x98, 0xD3, 0xE3, 0x88, 0x65, 0x2E, 0x7A, 0x6B, 0xD5, 0xFF, 0x4A, 0x17,
                0x8E, 0x92, 0xE9, 0xAD, 0xA3, 0xBE, 0x78, 0x42, 0x53, 0xCE, 0xC0, 0x17, 0x2F, 0x7C, 0x42, 0xB5,
                0x93, 0xCB, 0xDE, 0x21, 0x14, 0x24, 0xE9, 0xDC, 0x70, 0x7A, 0xC6, 0xE1, 0x3C, 0x61, 0x00, 0x12,
                0xAD, 0x2B, 0xFE, 0x52, 0x00, 0x11, 0x81, 0xBA, 0x95, 0x03, 0xB6, 0x5C, 0x8D, 0x6A, 0xB9, 0x44,
                0x59, 0x98, 0x2F, 0x96, 0xC4, 0xE1, 0xF9, 0x93, 0x17, 0xC1, 0xA5, 0xCB, 0x35, 0x84, 0x17, 0x42,
                0xA7, 0xFA, 0xF1, 0x2D, 0x5E, 0xCD, 0x08, 0x50, 0x0B, 0x59, 0xCF, 0x2A, 0x7A, 0x77, 0xFB, 0x14,
                0x7D, 0x8E, 0xCC, 0x75, 0xF3, 0xC8, 0x3E, 0xE1, 0x4B, 0xFC, 0xEA, 0x96, 0x6C, 0x86, 0xB3, 0xC7,
                0x89, 0xCF, 0xA9, 0x48, 0xEA, 0x70, 0x76, 0xE1, 0xB6, 0x93, 0xF3, 0x77, 0x21, 0x1E, 0xF5, 0xB5,
                0xFE, 0x22, 0x3E, 0x21, 0x2B, 0x7C, 0xFE, 0x1A, 0xB5, 0x53, 0x49, 0xC8, 0x6F, 0x8B, 0xFB, 0x10,
                0xA8, 0x2A, 0x2D, 0x2C, 0x95, 0x0E, 0x20, 0xFC, 0xFF
            };

            Assert.AreEqual(true, Certificates.Verify(str, sig, cer));
        }

        [TestMethod]
        public void Test_bytebytebyte_Sig()
        {
#if DEBUG
            byte[] sig = new byte[] {
                0x78, 0x62, 0x66, 0xED, 0xE4, 0xBB, 0x8B, 0x2F, 0x1F, 0x1F, 0x3E, 0x29, 0xF0, 0xF1, 0xB6, 0x6D,
                0xDF, 0x95, 0x0C, 0xB9, 0x4B, 0x8A, 0xFD, 0xFF, 0xB6, 0x71, 0xCA, 0x44, 0x7E, 0x91, 0xA2, 0x20,
                0x68, 0x15, 0x8D, 0x3A, 0xF3, 0x49, 0xF9, 0xD4, 0x5B, 0x29, 0xDD, 0x75, 0x59, 0x5A, 0xAB, 0x3C,
                0xBD, 0x1F, 0x55, 0xC5, 0xEF, 0xBC, 0xDC, 0xB7, 0x7C, 0x09, 0xC5, 0x38, 0x3A, 0x16, 0x7D, 0x45,
                0xD4, 0x25, 0xA1, 0xB7, 0xF2, 0x96, 0xD5, 0x41, 0xFA, 0xA5, 0x67, 0xE7, 0xD3, 0xC0, 0x0F, 0x78,
                0x3A, 0xE0, 0x64, 0xD4, 0xB9, 0x9B, 0x20, 0xC1, 0x46, 0x48, 0x3C, 0xE0, 0x95, 0x4C, 0x89, 0x98,
                0x6A, 0x6C, 0x71, 0x4D, 0x83, 0xB4, 0xFE, 0xAE, 0x50, 0x76, 0xFD, 0x5D, 0x91, 0x68, 0x85, 0x49,
                0x1C, 0x8A, 0x42, 0xFB, 0x4D, 0x57, 0x9F, 0xC3, 0x24, 0x94, 0xCA, 0x91, 0x31, 0x29, 0x20, 0x4D,
                0xB3, 0x5F, 0xB5, 0x84, 0xCC, 0xF6, 0xB4, 0x23, 0x0E, 0x78, 0x75, 0x79, 0x06, 0xE7, 0x57, 0xE6,
                0x15, 0xF5, 0xB3, 0xE5, 0xE4, 0xC4, 0xAF, 0xBF, 0x03, 0x9B, 0x59, 0x32, 0x25, 0x04, 0xC3, 0x00,
                0x31, 0xFF, 0x5B, 0xE2, 0x59, 0x8B, 0xDC, 0xB7, 0x7B, 0xAE, 0x4C, 0xC0, 0x50, 0x31, 0xE4, 0xCD,
                0x78, 0x5B, 0xAB, 0x71, 0xE0, 0x40, 0xFF, 0xBA, 0xE2, 0xD5, 0xF7, 0x4C, 0xE6, 0xFB, 0x7B, 0x80,
                0x40, 0x9E, 0x06, 0x8C, 0xAE, 0x8D, 0xC3, 0x93, 0x46, 0x35, 0x5C, 0x65, 0x78, 0x93, 0xEE, 0xA5,
                0x46, 0x23, 0xD6, 0xB3, 0xF2, 0xC8, 0x81, 0xD6, 0x47, 0x43, 0x80, 0xF0, 0x9E, 0xE7, 0xFF, 0xA9,
                0x91, 0x6F, 0x48, 0x38, 0x9D, 0xAA, 0x25, 0x3E, 0xF0, 0xE1, 0xB6, 0x9E, 0x6B, 0xC0, 0x51, 0xC5,
                0x28, 0xA1, 0x49, 0x45, 0xC9, 0x69, 0xED, 0xC1, 0x1E, 0xE8, 0x89, 0x38, 0x47, 0xD3, 0x34, 0x03};

            byte[] data = Encoding.ASCII.GetBytes("123456789");
            byte[] cer = Certificates.ExtractMainCER();
            Assert.AreEqual(true, Certificates.Verify(data, sig, cer));
#else
            //ExtractMainCER() is not available in Release Mode
            Assert.AreEqual(true, true);
#endif
        }

        [TestMethod]
        public void Test_MainSig2()
        {
            byte[] data = new byte[] {
                0x7B, 0x22, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3A, 0x22, 0x46, 0x6F, 0x78,
                0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x31, 0x22,
                0x2C, 0x22, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x22, 0x3A, 0x22, 0x4D, 0x69, 0x6E, 0x69, 0x20, 0x50,
                0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28, 0x6E, 0x6F, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x73,
                0x29, 0x22, 0x2C, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x22,
                0x3A, 0x22, 0x22, 0x2C, 0x22, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x3A,
                0x22, 0x35, 0x63, 0x64, 0x36, 0x39, 0x34, 0x34, 0x34, 0x2D, 0x66, 0x64, 0x36, 0x63, 0x2D, 0x34,
                0x34, 0x37, 0x35, 0x2D, 0x62, 0x33, 0x38, 0x65, 0x2D, 0x36, 0x31, 0x39, 0x37, 0x39, 0x35, 0x36,
                0x37, 0x35, 0x66, 0x39, 0x35, 0x22, 0x2C, 0x22, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x3A,
                0x22, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x46, 0x6F, 0x78, 0x53, 0x44, 0x43, 0x5F, 0x43, 0x6F,
                0x6D, 0x6D, 0x6F, 0x6E, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20, 0x53,
                0x79, 0x73, 0x74, 0x65, 0x6D, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x75, 0x73, 0x69, 0x6E, 0x67, 0x20,
                0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x43, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F,
                0x6E, 0x73, 0x2E, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x75,
                0x73, 0x69, 0x6E, 0x67, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x54, 0x65, 0x78, 0x74,
                0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x5C, 0x72, 0x5C, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x73, 0x70, 0x61,
                0x63, 0x65, 0x20, 0x46, 0x6F, 0x78, 0x53, 0x44, 0x43, 0x5F, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67,
                0x65, 0x5C, 0x72, 0x5C, 0x6E, 0x7B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x70, 0x75,
                0x62, 0x6C, 0x69, 0x63, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,
                0x67, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74, 0x65,
                0x20, 0x3A, 0x20, 0x50, 0x4B, 0x47, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5C, 0x72, 0x5C, 0x6E,
                0x20, 0x20, 0x20, 0x20, 0x7B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x50, 0x4B, 0x47, 0x49, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x53, 0x74, 0x61, 0x74, 0x65,
                0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x3D, 0x20, 0x50, 0x4B, 0x47, 0x49, 0x6E, 0x73, 0x74,
                0x61, 0x6C, 0x6C, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2E, 0x4E, 0x6F, 0x74, 0x53, 0x65, 0x74, 0x3B,
                0x5C, 0x72, 0x5C, 0x6E, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x20, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
                0x20, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x49, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x61, 0x74, 0x69,
                0x6F, 0x6E, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x50, 0x4B, 0x47, 0x52, 0x75, 0x6E, 0x6E,
                0x69, 0x6E, 0x67, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x20, 0x50,
                0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x2C, 0x20, 0x50, 0x4B, 0x47, 0x49, 0x6E, 0x73, 0x74, 0x61,
                0x6C, 0x6C, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x29, 0x5C, 0x72,
                0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x5C, 0x72, 0x5C, 0x6E, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65,
                0x20, 0x3D, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
                0x2E, 0x53, 0x65, 0x74, 0x49, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x50, 0x61, 0x74, 0x68, 0x28,
                0x5C, 0x22, 0x25, 0x50, 0x52, 0x4F, 0x47, 0x52, 0x41, 0x4D, 0x46, 0x49, 0x4C, 0x45, 0x53, 0x25,
                0x5C, 0x5C, 0x5C, 0x5C, 0x46, 0x6F, 0x78, 0x5C, 0x5C, 0x5C, 0x5C, 0x4D, 0x79, 0x20, 0x50, 0x61,
                0x63, 0x6B, 0x61, 0x67, 0x65, 0x5C, 0x22, 0x29, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
                0x2E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x54, 0x65, 0x78, 0x74, 0x20, 0x3D, 0x20, 0x5C, 0x22, 0x5C,
                0x22, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x28, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61,
                0x74, 0x75, 0x73, 0x2E, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x29, 0x3B, 0x5C, 0x72, 0x5C,
                0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x5C, 0x72, 0x5C, 0x6E, 0x5C, 0x72,
                0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63,
                0x20, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x50, 0x72, 0x65, 0x49, 0x6E,
                0x73, 0x74, 0x61, 0x6C, 0x6C, 0x28, 0x50, 0x4B, 0x47, 0x52, 0x75, 0x6E, 0x6E, 0x69, 0x6E, 0x67,
                0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x20, 0x50, 0x61, 0x63, 0x6B,
                0x61, 0x67, 0x65, 0x29, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x7B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x2E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x54, 0x65,
                0x78, 0x74, 0x20, 0x3D, 0x20, 0x5C, 0x22, 0x5C, 0x22, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,
                0x20, 0x28, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2E, 0x53, 0x75, 0x63, 0x63,
                0x65, 0x73, 0x73, 0x29, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x7D, 0x5C, 0x72, 0x5C, 0x6E, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x20, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61, 0x74,
                0x75, 0x73, 0x20, 0x50, 0x6F, 0x73, 0x74, 0x49, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x28, 0x50,
                0x4B, 0x47, 0x52, 0x75, 0x6E, 0x6E, 0x69, 0x6E, 0x67, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
                0x44, 0x61, 0x74, 0x61, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x29, 0x5C, 0x72, 0x5C,
                0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67,
                0x65, 0x2E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x54, 0x65, 0x78, 0x74, 0x20, 0x3D, 0x20, 0x5C, 0x22,
                0x5C, 0x22, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x28, 0x50, 0x4B, 0x47, 0x53, 0x74,
                0x61, 0x74, 0x75, 0x73, 0x2E, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x29, 0x3B, 0x5C, 0x72,
                0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x5C, 0x72, 0x5C, 0x6E, 0x5C,
                0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69,
                0x63, 0x20, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x52, 0x6F, 0x6C, 0x6C,
                0x62, 0x61, 0x63, 0x6B, 0x28, 0x50, 0x4B, 0x47, 0x52, 0x75, 0x6E, 0x6E, 0x69, 0x6E, 0x67, 0x50,
                0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,
                0x67, 0x65, 0x29, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B,
                0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x2E, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x54, 0x65, 0x78,
                0x74, 0x20, 0x3D, 0x20, 0x5C, 0x22, 0x5C, 0x22, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20,
                0x28, 0x50, 0x4B, 0x47, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2E, 0x53, 0x75, 0x63, 0x63, 0x65,
                0x73, 0x73, 0x29, 0x3B, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x5C, 0x72, 0x5C,
                0x6E, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x75, 0x62,
                0x6C, 0x69, 0x63, 0x20, 0x4C, 0x69, 0x73, 0x74, 0x3C, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E,
                0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x69, 0x65, 0x73,
                0x28, 0x50, 0x4B, 0x47, 0x52, 0x75, 0x6E, 0x6E, 0x69, 0x6E, 0x67, 0x50, 0x61, 0x63, 0x6B, 0x61,
                0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x29, 0x5C,
                0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x5C, 0x72, 0x5C, 0x6E,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75,
                0x72, 0x6E, 0x20, 0x28, 0x6E, 0x65, 0x77, 0x20, 0x4C, 0x69, 0x73, 0x74, 0x3C, 0x73, 0x74, 0x72,
                0x69, 0x6E, 0x67, 0x3E, 0x28, 0x29, 0x29, 0x3B, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x7D, 0x5C, 0x72, 0x5C, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x5C, 0x72,
                0x5C, 0x6E, 0x7D, 0x5C, 0x72, 0x5C, 0x6E, 0x22, 0x2C, 0x22, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74,
                0x66, 0x69, 0x6C, 0x65, 0x22, 0x3A, 0x22, 0x22, 0x2C, 0x22, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F,
                0x6E, 0x49, 0x44, 0x22, 0x3A, 0x30, 0x2C, 0x22, 0x46, 0x69, 0x6C, 0x65, 0x73, 0x22, 0x3A, 0x5B,
                0x5D, 0x2C, 0x22, 0x46, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x73, 0x22, 0x3A, 0x5B, 0x5D, 0x7D};

            byte[] sig = new byte[] {
                0x7E, 0xBC, 0x00, 0xF9, 0x02, 0x62, 0x01, 0x9E, 0x26, 0x2E, 0x01, 0x65, 0xFB, 0x54, 0xD1, 0x83,
                0x52, 0xB8, 0x8E, 0x48, 0x80, 0xDF, 0x70, 0xB3, 0xEA, 0x48, 0xCB, 0xE7, 0xC0, 0xAB, 0x26, 0x45,
                0x14, 0x83, 0x1B, 0xDA, 0xCC, 0x0F, 0xE2, 0xCA, 0xDB, 0x71, 0x33, 0x43, 0xBD, 0x6B, 0xE0, 0x55,
                0x8E, 0xD8, 0x49, 0x13, 0x3F, 0x3F, 0xD1, 0x7F, 0x95, 0xED, 0x98, 0x59, 0xA3, 0xDD, 0xAA, 0x67,
                0xE6, 0x1F, 0xF9, 0x2B, 0xBC, 0x99, 0x56, 0x9E, 0x2F, 0x78, 0x77, 0xB6, 0x24, 0xAD, 0x51, 0xBF,
                0x99, 0x05, 0x19, 0x65, 0xB3, 0x01, 0x63, 0x8A, 0x31, 0xB6, 0xD7, 0xA1, 0x0D, 0xCC, 0x2E, 0xA8,
                0x18, 0x65, 0x69, 0x02, 0x30, 0x3B, 0xD3, 0x18, 0x26, 0xAB, 0x6E, 0x5F, 0x1E, 0x89, 0xA6, 0x84,
                0x07, 0x11, 0x05, 0xBB, 0x50, 0x12, 0x6D, 0xC5, 0x82, 0x72, 0x9F, 0x1B, 0x56, 0xD7, 0xF2, 0x90,
                0x78, 0xC4, 0x3D, 0x6F, 0xDD, 0xE3, 0xAE, 0x32, 0x8E, 0x55, 0xE4, 0x42, 0xF0, 0x05, 0x7B, 0x33,
                0xD1, 0xCA, 0xB5, 0xD6, 0x3A, 0x55, 0xDD, 0x0E, 0xB5, 0xEF, 0xB9, 0x20, 0xCF, 0xA2, 0x2D, 0x21,
                0xA8, 0xD0, 0x5B, 0x9E, 0xDF, 0xD3, 0x91, 0x12, 0x6C, 0x96, 0xF9, 0x88, 0xB8, 0x56, 0x97, 0xEF,
                0xF0, 0xF8, 0x70, 0xAB, 0x25, 0x78, 0xD1, 0x0B, 0x02, 0xA2, 0xED, 0x34, 0x7B, 0xCD, 0x7F, 0x93,
                0xF2, 0x9F, 0x87, 0xAC, 0x39, 0x81, 0x44, 0x96, 0x57, 0x6C, 0x39, 0x76, 0x2F, 0x2A, 0xA8, 0x2E,
                0x92, 0x6E, 0x3B, 0xD0, 0xCF, 0xFC, 0x86, 0xB1, 0x13, 0x1C, 0x9B, 0x70, 0x16, 0x27, 0x2C, 0x56,
                0x0D, 0x29, 0x45, 0x92, 0x98, 0x31, 0x32, 0x1F, 0x42, 0xEC, 0x92, 0x18, 0xCB, 0x75, 0x5B, 0xC1,
                0x6B, 0xFB, 0x5F, 0xAB, 0x1E, 0xBE, 0xCE, 0xD0, 0x42, 0x50, 0xE2, 0x21, 0xF1, 0x70, 0x59, 0x06};

            Assert.AreEqual(true, Certificates.Verify(data, sig, InternalCertificate.Main));
        }

        [TestMethod]
        public void TestLicData()
        {
            Assert.Inconclusive("Not available for GitHub version");
        }

        [TestMethod]
        public void TestCompareClasses1()
        {
            FooClass c1 = new FooClass();
            FooClass c2 = new FooClass();
            c1.i1 = c2.i1 = 2;
            c1.i2 = c2.i2 = 265465;
            c1.ii1 = c2.ii1 = 47563846758376528L;
            c1.ii2 = c2.ii2 = 4562523256235645653L;
            c1.s1 = c2.s1 = "foo bar test";
            c1.s2 = c2.s2 = "fdkjhgkdfsghskdjfhgkusziwu.lerg";
            Assert.AreEqual(true, CommonUtilities.CompareClasses(c1, c2));
        }

        [TestMethod]
        public void TestCompareClasses2()
        {
            FooClass c1 = new FooClass();
            FooClass c2 = new FooClass();
            c1.i1 = c2.i1 = 2;
            c1.i2 = c2.i2 = 265465;
            c1.ii1 = c2.ii1 = 47563846758376528L;
            c1.ii2 = c2.ii2 = 4562523256235645653L;
            c1.s1 = c2.s1 = null;
            c1.s2 = c2.s2 = null;
            Assert.AreEqual(true, CommonUtilities.CompareClasses(c1, c2));
        }

        [TestMethod]
        public void TestCompareClasses3()
        {
            FooClass c1 = new FooClass();
            FooClass c2 = new FooClass();
            c1.i1 = c2.i1 = 2;
            c1.i2 = c2.i2 = 265465;
            c1.ii1 = c2.ii1 = 47563846758376528L;
            c1.ii2 = c2.ii2 = 4562523256235645653L;
            c1.s1 = "foo bar test";
            c2.s1 = "foo ber test";
            c1.s2 = c2.s2 = "fdkjhgkdfsghskdjfhgkusziwu.lerg";
            Assert.AreEqual(false, CommonUtilities.CompareClasses(c1, c2));
        }

        [TestMethod]
        public void TestCompareClasses4()
        {
            FooClass c1 = new FooClass();
            FooClass c2 = new FooClass();
            c1.i1 = c2.i1 = 2;
            c1.i2 = c2.i2 = 265465;
            c1.ii1 = c2.ii1 = 47563846758376528L;
            c1.ii2 = c2.ii2 = 4562523256235645653L;
            c1.s1 = c2.s1 = "foo bar test";
            c1.s2 = c2.s2 = "fdkjhgkdfsghskdjfhgkusziwu.lerg";
            c1.s1 = null;
            c2.s2 = null;
            Assert.AreEqual(false, CommonUtilities.CompareClasses(c1, c2));
        }

        [TestMethod]
        public void TestCompareClasses5()
        {
            FooClass c1 = new FooClass();
            FooClass c2 = new FooClass();
            c1.i1 = c2.i1 = 2;
            c1.i2 = c2.i2 = 265465;
            c1.ii1 = c2.ii1 = 47563846758376528L;
            c1.ii2 = c2.ii2 = 4562523256235645653L;
            c1.s1 = c2.s1 = "foo bar test";
            c1.s2 = c2.s2 = "fdkjhgkdfsghskdjfhgkusziwu.lerg";
            c1.s1 = null;
            c2.s2 = null;
            Assert.AreEqual(true, CommonUtilities.CompareClasses(c1, c2, "s1", "s2"));
        }

        [TestMethod]
        public void TestClassConverterByte()
        {
            byte[] d = new byte[] { 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8 };
            TestClass t = ClassCopy.CopyClassDatafromBinary<TestClass>(d);

            Assert.AreEqual(0x04030201, t.T1);
            Assert.AreEqual(0x05, t.T2);
            Assert.AreEqual(0x0807, t.T3);
        }

        [TestMethod]
        public void ReportingFlagsByteShifting1()
        {
            Int64 B = 0x7800000000000000L;
            B &= (Int64)ReportingFlags.IconFlags;
            B >>= (int)ReportingFlags.IconFlagsShift;
            Assert.AreEqual(0xF, B);
        }

        [TestMethod]
        public void ReportingFlagsByteShifting2()
        {
            Int64 B = 0x5000000000000000L;
            B &= (Int64)ReportingFlags.IconFlags;
            B >>= (int)ReportingFlags.IconFlagsShift;
            Assert.AreEqual(0xA, B);
        }

        [StructLayout(LayoutKind.Sequential, Pack = 0)]
        class TestClass
        {
            public int T1;
            public byte T2;
            public short T3;
        }

        [TestMethod]
        public void TestCompression()
        {
            const string TestBytes = "Testing 123546 99999999999999999999999999999999999999999999999 8888888888888888888888888888888";

            byte[] data = Encoding.Unicode.GetBytes(TestBytes);

            byte[] cdata = Compress.CompressData(data);
            byte[] udata = Compress.UncompressData(cdata);

            Assert.AreEqual(TestBytes, Encoding.Unicode.GetString(udata));
        }
    }
}
